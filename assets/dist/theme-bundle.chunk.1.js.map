{"version":3,"sources":["webpack:///./assets/js/theme/gift-certificate.js","webpack:///./assets/js/theme/common/models/forms.js","webpack:///./assets/js/theme/common/gift-certificate-validator.js"],"names":["GiftCertificate","_PageManager","context","_this","call","$certBalanceForm","$","purchaseModel","val","length","formModel","email","apply","arguments","$purchaseForm","$customAmounts","find","purchaseValidator","nod","submit","delay","$element","min","data","minFormatted","max","maxFormatted","add","selector","validate","cb","numberVal","Number","errorMessage","toName","toEmail","fromName","fromEmail","triggeredBy","certTheme","get","checked","agreeToTerms","balanceVal","checkCertBalanceValidator","on","performCheck","areAll","event","preventDefault","click","modal","defaultModal","previewUrl","currentTarget","serialize","open","api","getPage","err","content","updateContent","previewError","wrap","prototype","$balanceForm","balanceValidator","giftCertChecker","PageManager","forms","value","test","password","this","notEmpty","cert"],"mappings":"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","file":"theme-bundle.chunk.1.js","sourcesContent":["import PageManager from './page-manager';\nimport nod from './common/nod';\nimport giftCertChecker from './common/gift-certificate-validator';\nimport formModel from './common/models/forms';\nimport { api } from '@bigcommerce/stencil-utils';\nimport { defaultModal } from './global/modal';\n\nexport default class GiftCertificate extends PageManager {\n    constructor(context) {\n        super(context);\n\n        const $certBalanceForm = $('#gift-certificate-balance');\n\n        const purchaseModel = {\n            recipientName(val) {\n                return val.length;\n            },\n            recipientEmail(...args) {\n                return formModel.email(...args);\n            },\n            senderName(val) {\n                return val.length;\n            },\n            senderEmail(...args) {\n                return formModel.email(...args);\n            },\n            customAmount(value, min, max) {\n                return value && value >= min && value <= max;\n            },\n            setAmount(value, options) {\n                let found = false;\n\n                options.forEach((option) => {\n                    if (option === value) {\n                        found = true;\n                        return false;\n                    }\n                });\n\n                return found;\n            },\n        };\n\n        const $purchaseForm = $('#gift-certificate-form');\n        const $customAmounts = $purchaseForm.find('input[name=\"certificate_amount\"]');\n        const purchaseValidator = nod({\n            submit: '#gift-certificate-form input[type=\"submit\"]',\n            delay: 300,\n        });\n\n        if ($customAmounts.length) {\n            const $element = $purchaseForm.find('input[name=\"certificate_amount\"]');\n            const min = $element.data('min');\n            const minFormatted = $element.data('minFormatted');\n            const max = $element.data('max');\n            const maxFormatted = $element.data('maxFormatted');\n\n            purchaseValidator.add({\n                selector: '#gift-certificate-form input[name=\"certificate_amount\"]',\n                validate: (cb, val) => {\n                    const numberVal = Number(val);\n\n                    if (!numberVal) {\n                        cb(false);\n                    }\n\n                    cb(numberVal >= min && numberVal <= max);\n                },\n                errorMessage: `You must enter a certificate amount between ${minFormatted} and ${maxFormatted}.`,\n            });\n        }\n\n        purchaseValidator.add([\n            {\n                selector: '#gift-certificate-form input[name=\"to_name\"]',\n                validate: (cb, val) => {\n                    const result = purchaseModel.recipientName(val);\n\n                    cb(result);\n                },\n                errorMessage: this.context.toName,\n            },\n            {\n                selector: '#gift-certificate-form input[name=\"to_email\"]',\n                validate: (cb, val) => {\n                    const result = purchaseModel.recipientEmail(val);\n\n                    cb(result);\n                },\n                errorMessage: this.context.toEmail,\n            },\n            {\n                selector: '#gift-certificate-form input[name=\"from_name\"]',\n                validate: (cb, val) => {\n                    const result = purchaseModel.senderName(val);\n\n                    cb(result);\n                },\n                errorMessage: this.context.fromName,\n            },\n            {\n                selector: '#gift-certificate-form input[name=\"from_email\"]',\n                validate: (cb, val) => {\n                    const result = purchaseModel.senderEmail(val);\n\n                    cb(result);\n                },\n                errorMessage: this.context.fromEmail,\n            },\n            {\n                selector: '#gift-certificate-form input[name=\"certificate_theme\"]:first-of-type',\n                triggeredBy: '#gift-certificate-form input[name=\"certificate_theme\"]',\n                validate: (cb) => {\n                    const val = $purchaseForm.find('input[name=\"certificate_theme\"]:checked').val();\n\n                    cb(typeof (val) === 'string');\n                },\n                errorMessage: this.context.certTheme,\n            },\n            {\n                selector: '#gift-certificate-form input[name=\"agree\"]',\n                validate: (cb) => {\n                    const val = $purchaseForm.find('input[name=\"agree\"]').get(0).checked;\n\n                    cb(val);\n                },\n                errorMessage: this.context.agreeToTerms,\n            },\n            {\n                selector: '#gift-certificate-form input[name=\"agree2\"]',\n                validate: (cb) => {\n                    const val = $purchaseForm.find('input[name=\"agree2\"]').get(0).checked;\n\n                    cb(val);\n                },\n                errorMessage: this.context.agreeToTerms,\n            },\n        ]);\n\n        if ($certBalanceForm.length) {\n            const balanceVal = this.checkCertBalanceValidator($certBalanceForm);\n\n            $certBalanceForm.on('submit', () => {\n                balanceVal.performCheck();\n\n                if (!balanceVal.areAll('valid')) {\n                    return false;\n                }\n            });\n        }\n\n        $purchaseForm.on('submit', event => {\n            purchaseValidator.performCheck();\n\n            if (!purchaseValidator.areAll('valid')) {\n                return event.preventDefault();\n            }\n        });\n\n        $('#gift-certificate-preview').click(event => {\n            event.preventDefault();\n\n            purchaseValidator.performCheck();\n\n            if (!purchaseValidator.areAll('valid')) {\n                return;\n            }\n\n            const modal = defaultModal();\n            const previewUrl = `${$(event.currentTarget).data('previewUrl')}&${$purchaseForm.serialize()}`;\n\n            modal.open();\n\n            api.getPage(previewUrl, {}, (err, content) => {\n                if (err) {\n                    return modal.updateContent(this.context.previewError);\n                }\n\n                modal.updateContent(content, { wrap: true });\n            });\n        });\n    }\n\n    checkCertBalanceValidator($balanceForm) {\n        const balanceValidator = nod({\n            submit: $balanceForm.find('input[type=\"submit\"]'),\n        });\n\n        balanceValidator.add({\n            selector: $balanceForm.find('input[name=\"giftcertificatecode\"]'),\n            validate(cb, val) {\n                cb(giftCertChecker(val));\n            },\n            errorMessage: 'You must enter a certificate code.',\n        });\n\n        return balanceValidator;\n    }\n}\n","const forms = {\n    email(value) {\n        const re = /^.+@.+\\..+/;\n        return re.test(value);\n    },\n\n    /**\n     * Validates a password field\n     * @param value\n     * @returns {boolean}\n     */\n    password(value) {\n        return this.notEmpty(value);\n    },\n\n    /**\n     * validates if a field is empty\n     * @param value\n     * @returns {boolean}\n     *\n     */\n    notEmpty(value) {\n        return value.length > 0;\n    },\n};\n\nexport default forms;\n","export default function (cert) {\n    if (typeof cert !== 'string') {\n        return false;\n    }\n\n    // Add any custom gift certificate validation logic here\n    return true;\n}\n"],"sourceRoot":""}