{"version":3,"sources":["webpack:///./assets/js/theme/brand.js","webpack:///./assets/js/theme/common/models/forms.js","webpack:///./assets/js/theme/common/form-utils.js","webpack:///./assets/js/theme/common/url-utils.js","webpack:///./assets/js/theme/catalog.js","webpack:///./assets/js/theme/common/faceted-search.js"],"names":["Brand","_CatalogPage","apply","arguments","_proto","prototype","onReady","compareProducts","this","context","urls","$","length","initFacetedSearch","onSortBySubmit","bind","hooks","on","$productListingContainer","$facetedSearchContainer","requestOptions","template","productListing","sidebar","config","shop_by_brand","brand","products","limit","brandProductsPerPage","showMore","facetedSearch","FacetedSearch","content","html","triggerHandler","animate","scrollTop","CatalogPage","forms","email","value","test","password","notEmpty","inputTagNames","classifyForm","formSelector","options","$form","$inputs","find","join","_options$formFieldCla","formFieldClass","each","__","input","specificClassName","$input","$formField","parent","tagName","prop","toLowerCase","className","inputType","_includes","_camelCase","_capitalize","addClass","classifyInput","insertStateHiddenField","$stateField","stateFieldAttrs","type","name","$field","fieldId","match","getFieldId","after","Validators","setEmailValidation","validator","field","add","selector","validate","cb","val","errorMessage","setPasswordValidation","passwordSelector","password2Selector","requirements","isOptional","$password","passwordValidations","result","RegExp","alpha","numeric","minlength","error","setMinMaxPriceValidation","selectors","errorSelector","fieldsetSelector","maxPriceSelector","minPriceSelector","configure","form","preventSubmit","successClass","setMessageOptions","errorSpan","setStateCountryValidation","cleanUpStateValidation","$fieldClassElement","data","Object","keys","nod","classes","forEach","hasClass","removeClass","urlUtils","getUrl","window","location","pathname","search","goToUrl","url","history","pushState","document","title","trigger","replaceParams","params","param","parsed","Url","parse","hasOwnProperty","query","format","buildQueryString","queryData","key","out","Array","isArray","ndx","substring","parseQueryParams","i","temp","split","push","_PageManager","event","href","queryParams","currentTarget","serialize","page","preventDefault","PageManager","callback","_this","defaultOptions","accordionToggleSelector","blockerSelector","clearFacetSelector","componentSelector","facetNavListSelector","priceRangeErrorSelector","priceRangeFieldsetSelector","priceRangeFormSelector","priceRangeMaxPriceSelector","priceRangeMinPriceSelector","showMoreToggleSelector","facetedSearchFilterItems","modal","modalFactory","modalOpen","_extend","collapsedFacets","collapsedFacetItems","collapsibleFactory","initPriceValidator","index","navList","collapseFacetItems","accordionToggle","collapsible","isCollapsed","targetId","setTimeout","is","collapseAllFacets","onStateChange","onToggleClick","onAccordionToggle","onClearFacet","onFacetClick","onRangeSubmit","filterFacetItems","bindEvents","refreshView","restoreCollapsedFacets","restoreCollapsedFacetItems","updateView","_this2","show","api","getPage","err","hide","Error","expandFacetItems","$navList","id","attr","_without","hasMoreResults","_union","toggleFacetItems","getMoreFacetResults","_this3","facet","facetUrl","list_all","response","open","updateContent","$items","element","text","indexOf","expandFacet","$accordionToggle","collapseFacet","close","_this4","expandAllFacets","_this5","priceRangeValidator","_this6","_this7","unbindEvents","onPopState","off","stopPropagation","$toggle","$link","toggleClass","urlQueryParams","assign","areAll","constants","VALID","decodeURI","currentUrl","URLSearchParams","has","updatedLinkUrl","replace","replaceState"],"mappings":"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","file":"theme-bundle.chunk.11.js","sourcesContent":["import { hooks } from '@bigcommerce/stencil-utils';\nimport CatalogPage from './catalog';\nimport compareProducts from './global/compare-products';\nimport FacetedSearch from './common/faceted-search';\n\nexport default class Brand extends CatalogPage {\n    onReady() {\n        compareProducts(this.context.urls);\n\n        if ($('#facetedSearch').length > 0) {\n            this.initFacetedSearch();\n        } else {\n            this.onSortBySubmit = this.onSortBySubmit.bind(this);\n            hooks.on('sortBy-submitted', this.onSortBySubmit);\n        }\n    }\n\n    initFacetedSearch() {\n        const $productListingContainer = $('#product-listing-container');\n        const $facetedSearchContainer = $('#faceted-search-container');\n        const productsPerPage = this.context.brandProductsPerPage;\n        const requestOptions = {\n            template: {\n                productListing: 'brand/product-listing',\n                sidebar: 'brand/sidebar',\n            },\n            config: {\n                shop_by_brand: true,\n                brand: {\n                    products: {\n                        limit: productsPerPage,\n                    },\n                },\n            },\n            showMore: 'brand/show-more',\n        };\n\n        this.facetedSearch = new FacetedSearch(requestOptions, (content) => {\n            $productListingContainer.html(content.productListing);\n            $facetedSearchContainer.html(content.sidebar);\n\n            $('body').triggerHandler('compareReset');\n\n            $('html, body').animate({\n                scrollTop: 0,\n            }, 100);\n        });\n    }\n}\n","const forms = {\n    email(value) {\n        const re = /^.+@.+\\..+/;\n        return re.test(value);\n    },\n\n    /**\n     * Validates a password field\n     * @param value\n     * @returns {boolean}\n     */\n    password(value) {\n        return this.notEmpty(value);\n    },\n\n    /**\n     * validates if a field is empty\n     * @param value\n     * @returns {boolean}\n     *\n     */\n    notEmpty(value) {\n        return value.length > 0;\n    },\n};\n\nexport default forms;\n","import _ from 'lodash';\nimport nod from './nod';\nimport forms from './models/forms';\n\nconst inputTagNames = [\n    'input',\n    'select',\n    'textarea',\n];\n\n/**\n * Apply class name to an input element on its type\n * @param {object} input\n * @param {string} formFieldClass\n * @return {object} Element itself\n */\nfunction classifyInput(input, formFieldClass) {\n    const $input = $(input);\n    const $formField = $input.parent(`.${formFieldClass}`);\n    const tagName = $input.prop('tagName').toLowerCase();\n\n    let className = `${formFieldClass}--${tagName}`;\n    let specificClassName;\n\n    // Input can be text/checkbox/radio etc...\n    if (tagName === 'input') {\n        const inputType = $input.prop('type');\n\n        if (_.includes(['radio', 'checkbox', 'submit'], inputType)) {\n            // ie: .form-field--checkbox, .form-field--radio\n            className = `${formFieldClass}--${_.camelCase(inputType)}`;\n        } else {\n            // ie: .form-field--input .form-field--inputText\n            specificClassName = `${className}${_.capitalize(inputType)}`;\n        }\n    }\n\n    // Apply class modifier\n    return $formField\n        .addClass(className)\n        .addClass(specificClassName);\n}\n\n/**\n * Apply class name to each input element in a form based on its type\n * @example\n * // Before\n * <form id=\"form\">\n *     <div class=\"form-field\">\n *         <input type=\"text\">\n *     </div>\n *     <div class=\"form-field\">\n *         <select>...</select>\n *     </div>\n * </form>\n *\n * classifyForm('#form', { formFieldClass: 'form-field' });\n *\n * // After\n * <div class=\"form-field form-field--input form-field--inputText\">...</div>\n * <div class=\"form-field form-field--select\">...</div>\n *\n * @param {string|object} formSelector - selector or element\n * @param {object} options\n * @return {jQuery} Element itself\n */\nexport function classifyForm(formSelector, options = {}) {\n    const $form = $(formSelector);\n    const $inputs = $form.find(inputTagNames.join(', '));\n\n    // Obtain options\n    const { formFieldClass = 'form-field' } = options;\n\n    // Classify each input in a form\n    $inputs.each((__, input) => {\n        classifyInput(input, formFieldClass);\n    });\n\n    return $form;\n}\n\n/**\n * Get id from given field\n * @param {object} $field JQuery field object\n * @return {string}\n */\nfunction getFieldId($field) {\n    const fieldId = $field.prop('name').match(/(\\[.*\\])/);\n\n    if (fieldId && fieldId.length !== 0) {\n        return fieldId[0];\n    }\n\n    return '';\n}\n\n/**\n * Insert hidden field after State/Province field\n * @param {object} $stateField JQuery field object\n */\nfunction insertStateHiddenField($stateField) {\n    const fieldId = getFieldId($stateField);\n    const stateFieldAttrs = {\n        type: 'hidden',\n        name: `FormFieldIsText${fieldId}`,\n        value: '1',\n    };\n\n    $stateField.after($('<input />', stateFieldAttrs));\n}\n\nconst Validators = {\n    /**\n     * Sets up a new validation when the form is dirty\n     * @param validator\n     * @param field\n     */\n    setEmailValidation: (validator, field) => {\n        if (field) {\n            validator.add({\n                selector: field,\n                validate: (cb, val) => {\n                    const result = forms.email(val);\n\n                    cb(result);\n                },\n                errorMessage: 'You must enter a valid email.',\n            });\n        }\n    },\n\n    /**\n     * Validate password fields\n     * @param validator\n     * @param passwordSelector\n     * @param password2Selector\n     * @param requirements\n     * @param isOptional\n     */\n    setPasswordValidation: (validator, passwordSelector, password2Selector, requirements, isOptional) => {\n        const $password = $(passwordSelector);\n        const passwordValidations = [\n            {\n                selector: passwordSelector,\n                validate: (cb, val) => {\n                    const result = val.length;\n\n                    if (isOptional) {\n                        return cb(true);\n                    }\n\n                    cb(result);\n                },\n                errorMessage: 'You must enter a password.',\n            },\n            {\n                selector: passwordSelector,\n                validate: (cb, val) => {\n                    const result = val.match(new RegExp(requirements.alpha))\n                        && val.match(new RegExp(requirements.numeric))\n                        && val.length >= requirements.minlength;\n\n                    // If optional and nothing entered, it is valid\n                    if (isOptional && val.length === 0) {\n                        return cb(true);\n                    }\n\n                    cb(result);\n                },\n                errorMessage: requirements.error,\n            },\n            {\n                selector: password2Selector,\n                validate: (cb, val) => {\n                    const result = val.length;\n\n                    if (isOptional) {\n                        return cb(true);\n                    }\n\n                    cb(result);\n                },\n                errorMessage: 'You must enter a password.',\n            },\n            {\n                selector: password2Selector,\n                validate: (cb, val) => {\n                    const result = val === $password.val();\n\n                    cb(result);\n                },\n                errorMessage: 'Your passwords do not match.',\n            },\n        ];\n\n        validator.add(passwordValidations);\n    },\n\n    /**\n     * Validate password fields\n     * @param {Nod} validator\n     * @param {Object} selectors\n     * @param {string} selectors.errorSelector\n     * @param {string} selectors.fieldsetSelector\n     * @param {string} selectors.formSelector\n     * @param {string} selectors.maxPriceSelector\n     * @param {string} selectors.minPriceSelector\n     */\n    setMinMaxPriceValidation: (validator, selectors) => {\n        const {\n            errorSelector,\n            fieldsetSelector,\n            formSelector,\n            maxPriceSelector,\n            minPriceSelector,\n        } = selectors;\n\n        validator.configure({\n            form: formSelector,\n            preventSubmit: true,\n            successClass: '_', // KLUDGE: Don't apply success class\n        });\n\n        validator.add({\n            errorMessage: 'Min price must be less than max. price.',\n            selector: minPriceSelector,\n            validate: `min-max:${minPriceSelector}:${maxPriceSelector}`,\n        });\n\n        validator.add({\n            errorMessage: 'Min price must be less than max. price.',\n            selector: maxPriceSelector,\n            validate: `min-max:${minPriceSelector}:${maxPriceSelector}`,\n        });\n\n        validator.add({\n            errorMessage: 'Max. price is required.',\n            selector: maxPriceSelector,\n            validate: 'presence',\n        });\n\n        validator.add({\n            errorMessage: 'Min. price is required.',\n            selector: minPriceSelector,\n            validate: 'presence',\n        });\n\n        validator.add({\n            errorMessage: 'Input must be greater than 0.',\n            selector: [minPriceSelector, maxPriceSelector],\n            validate: 'min-number:0',\n        });\n\n        validator.setMessageOptions({\n            selector: [minPriceSelector, maxPriceSelector],\n            parent: fieldsetSelector,\n            errorSpan: errorSelector,\n        });\n    },\n\n    /**\n     * Sets up a new validation when the form is dirty\n     * @param validator\n     * @param field\n     */\n    setStateCountryValidation: (validator, field) => {\n        if (field) {\n            validator.add({\n                selector: field,\n                validate: 'presence',\n                errorMessage: 'The \\'State/Province\\' field cannot be blank.',\n            });\n        }\n    },\n\n    /**\n     * Removes classes from dirty form if previously checked\n     * @param field\n     */\n    cleanUpStateValidation: (field) => {\n        const $fieldClassElement = $((`[data-type=\"${field.data('fieldType')}\"]`));\n\n        Object.keys(nod.classes).forEach((value) => {\n            if ($fieldClassElement.hasClass(nod.classes[value])) {\n                $fieldClassElement.removeClass(nod.classes[value]);\n            }\n        });\n    },\n};\n\nexport { Validators, insertStateHiddenField };\n","import Url from 'url';\n\nconst urlUtils = {\n    getUrl: () => `${window.location.pathname}${window.location.search}`,\n\n    goToUrl: (url) => {\n        window.history.pushState({}, document.title, url);\n        $(window).trigger('statechange');\n    },\n\n    replaceParams: (url, params) => {\n        const parsed = Url.parse(url, true);\n        let param;\n\n        // Let the formatter use the query object to build the new url\n        parsed.search = null;\n\n        for (param in params) {\n            if (params.hasOwnProperty(param)) {\n                parsed.query[param] = params[param];\n            }\n        }\n\n        return Url.format(parsed);\n    },\n\n    buildQueryString: (queryData) => {\n        let out = '';\n        let key;\n        for (key in queryData) {\n            if (queryData.hasOwnProperty(key)) {\n                if (Array.isArray(queryData[key])) {\n                    let ndx;\n\n                    for (ndx in queryData[key]) {\n                        if (queryData[key].hasOwnProperty(ndx)) {\n                            out += `&${key}=${queryData[key][ndx]}`;\n                        }\n                    }\n                } else {\n                    out += `&${key}=${queryData[key]}`;\n                }\n            }\n        }\n\n        return out.substring(1);\n    },\n\n    parseQueryParams: (queryData) => {\n        const params = {};\n\n        for (let i = 0; i < queryData.length; i++) {\n            const temp = queryData[i].split('=');\n\n            if (temp[0] in params) {\n                if (Array.isArray(params[temp[0]])) {\n                    params[temp[0]].push(temp[1]);\n                } else {\n                    params[temp[0]] = [params[temp[0]], temp[1]];\n                }\n            } else {\n                params[temp[0]] = temp[1];\n            }\n        }\n\n        return params;\n    },\n};\n\nexport default urlUtils;\n","import PageManager from './page-manager';\nimport urlUtils from './common/url-utils';\nimport Url from 'url';\n\nexport default class CatalogPage extends PageManager {\n    onSortBySubmit(event) {\n        const url = Url.parse(window.location.href, true);\n        const queryParams = $(event.currentTarget).serialize().split('=');\n\n        url.query[queryParams[0]] = queryParams[1];\n        delete url.query.page;\n\n        event.preventDefault();\n        window.location = Url.format({ pathname: url.pathname, search: urlUtils.buildQueryString(url.query) });\n    }\n}\n","import { hooks, api } from '@bigcommerce/stencil-utils';\r\nimport _ from 'lodash';\r\nimport Url from 'url';\r\nimport urlUtils from './url-utils';\r\nimport modalFactory from '../global/modal';\r\nimport collapsibleFactory from './collapsible';\r\nimport { Validators } from './form-utils';\r\nimport nod from './nod';\r\n\r\n/**\r\n * Faceted search view component\r\n */\r\nclass FacetedSearch {\r\n    /**\r\n     * @param {object} requestOptions - Object with options for the ajax requests\r\n     * @param {function} callback - Function to execute after fetching templates\r\n     * @param {object} options - Configurable options\r\n     * @example\r\n     *\r\n     * let requestOptions = {\r\n     *      templates: {\r\n     *          productListing: 'category/product-listing',\r\n     *          sidebar: 'category/sidebar'\r\n     *     }\r\n     * };\r\n     *\r\n     * let templatesDidLoad = function(content) {\r\n     *     $productListingContainer.html(content.productListing);\r\n     *     $facetedSearchContainer.html(content.sidebar);\r\n     * };\r\n     *\r\n     * let facetedSearch = new FacetedSearch(requestOptions, templatesDidLoad);\r\n     */\r\n    constructor(requestOptions, callback, options) {\r\n        const defaultOptions = {\r\n            accordionToggleSelector: '#facetedSearch .accordion-navigation, #facetedSearch .facetedSearch-toggle',\r\n            blockerSelector: '#facetedSearch .blocker',\r\n            clearFacetSelector: '#facetedSearch .facetedSearch-clearLink',\r\n            componentSelector: '#facetedSearch-navList',\r\n            facetNavListSelector: '#facetedSearch .navList',\r\n            priceRangeErrorSelector: '#facet-range-form .form-inlineMessage',\r\n            priceRangeFieldsetSelector: '#facet-range-form .form-fieldset',\r\n            priceRangeFormSelector: '#facet-range-form',\r\n            priceRangeMaxPriceSelector: '#facet-range-form [name=max_price]',\r\n            priceRangeMinPriceSelector: '#facet-range-form [name=min_price]',\r\n            showMoreToggleSelector: '#facetedSearch .accordion-content .toggleLink',\r\n            facetedSearchFilterItems: '#facetedSearch-filterItems .form-input',\r\n            modal: modalFactory('#modal')[0],\r\n            modalOpen: false,\r\n        };\r\n\r\n        // Private properties\r\n        this.requestOptions = requestOptions;\r\n        this.callback = callback;\r\n        this.options = _.extend({}, defaultOptions, options);\r\n        this.collapsedFacets = [];\r\n        this.collapsedFacetItems = [];\r\n\r\n        // Init collapsibles\r\n        collapsibleFactory();\r\n\r\n        // Init price validator\r\n        this.initPriceValidator();\r\n\r\n        // Show limited items by default\r\n        $(this.options.facetNavListSelector).each((index, navList) => {\r\n            this.collapseFacetItems($(navList));\r\n        });\r\n\r\n        // Mark initially collapsed accordions\r\n        $(this.options.accordionToggleSelector).each((index, accordionToggle) => {\r\n            const $accordionToggle = $(accordionToggle);\r\n            const collapsible = $accordionToggle.data('collapsibleInstance');\r\n\r\n            if (collapsible.isCollapsed) {\r\n                this.collapsedFacets.push(collapsible.targetId);\r\n            }\r\n        });\r\n\r\n        // Collapse all facets if initially hidden\r\n        // NOTE: Need to execute after Collapsible gets bootstrapped\r\n        setTimeout(() => {\r\n            if ($(this.options.componentSelector).is(':hidden')) {\r\n                this.collapseAllFacets();\r\n            }\r\n        });\r\n\r\n        // Observe user events\r\n        this.onStateChange = this.onStateChange.bind(this);\r\n        this.onToggleClick = this.onToggleClick.bind(this);\r\n        this.onAccordionToggle = this.onAccordionToggle.bind(this);\r\n        this.onClearFacet = this.onClearFacet.bind(this);\r\n        this.onFacetClick = this.onFacetClick.bind(this);\r\n        this.onRangeSubmit = this.onRangeSubmit.bind(this);\r\n        this.onSortBySubmit = this.onSortBySubmit.bind(this);\r\n        this.filterFacetItems = this.filterFacetItems.bind(this);\r\n\r\n        this.bindEvents();\r\n    }\r\n\r\n    // Public methods\r\n    refreshView(content) {\r\n        if (content) {\r\n            this.callback(content);\r\n        }\r\n\r\n        // Init collapsibles\r\n        collapsibleFactory();\r\n\r\n        // Init price validator\r\n        this.initPriceValidator();\r\n\r\n        // Restore view state\r\n        this.restoreCollapsedFacets();\r\n        this.restoreCollapsedFacetItems();\r\n\r\n        // Bind events\r\n        this.bindEvents();\r\n    }\r\n\r\n    updateView() {\r\n        $(this.options.blockerSelector).show();\r\n\r\n        api.getPage(urlUtils.getUrl(), this.requestOptions, (err, content) => {\r\n            $(this.options.blockerSelector).hide();\r\n\r\n            if (err) {\r\n                throw new Error(err);\r\n            }\r\n\r\n            // Refresh view with new content\r\n            this.refreshView(content);\r\n        });\r\n    }\r\n\r\n    expandFacetItems($navList) {\r\n        const id = $navList.attr('id');\r\n\r\n        // Remove\r\n        this.collapsedFacetItems = _.without(this.collapsedFacetItems, id);\r\n    }\r\n\r\n    collapseFacetItems($navList) {\r\n        const id = $navList.attr('id');\r\n        const hasMoreResults = $navList.data('hasMoreResults');\r\n\r\n        if (hasMoreResults) {\r\n            this.collapsedFacetItems = _.union(this.collapsedFacetItems, [id]);\r\n        } else {\r\n            this.collapsedFacetItems = _.without(this.collapsedFacetItems, id);\r\n        }\r\n    }\r\n\r\n    toggleFacetItems($navList) {\r\n        const id = $navList.attr('id');\r\n\r\n        // Toggle depending on `collapsed` flag\r\n        if (_.includes(this.collapsedFacetItems, id)) {\r\n            this.getMoreFacetResults($navList);\r\n\r\n            return true;\r\n        }\r\n\r\n        this.collapseFacetItems($navList);\r\n\r\n        return false;\r\n    }\r\n\r\n    getMoreFacetResults($navList) {\r\n        const facet = $navList.data('facet');\r\n        const facetUrl = urlUtils.getUrl();\r\n\r\n        if (this.requestOptions.showMore) {\r\n            api.getPage(facetUrl, {\r\n                template: this.requestOptions.showMore,\r\n                params: {\r\n                    list_all: facet,\r\n                },\r\n            }, (err, response) => {\r\n                if (err) {\r\n                    throw new Error(err);\r\n                }\r\n\r\n                this.options.modal.open();\r\n                this.options.modalOpen = true;\r\n                this.options.modal.updateContent(response);\r\n            });\r\n        }\r\n\r\n        this.collapseFacetItems($navList);\r\n\r\n        return false;\r\n    }\r\n\r\n    filterFacetItems(event) {\r\n        const $items = $('.navList-item');\r\n        const query = $(event.currentTarget).val().toLowerCase();\r\n\r\n        $items.each((index, element) => {\r\n            const text = $(element).text().toLowerCase();\r\n            if (text.indexOf(query) !== -1) {\r\n                $(element).show();\r\n            } else {\r\n                $(element).hide();\r\n            }\r\n        });\r\n    }\r\n\r\n    expandFacet($accordionToggle) {\r\n        const collapsible = $accordionToggle.data('collapsibleInstance');\r\n\r\n        collapsible.open();\r\n    }\r\n\r\n    collapseFacet($accordionToggle) {\r\n        const collapsible = $accordionToggle.data('collapsibleInstance');\r\n\r\n        collapsible.close();\r\n    }\r\n\r\n    collapseAllFacets() {\r\n        const $accordionToggles = $(this.options.accordionToggleSelector);\r\n\r\n        $accordionToggles.each((index, accordionToggle) => {\r\n            const $accordionToggle = $(accordionToggle);\r\n\r\n            this.collapseFacet($accordionToggle);\r\n        });\r\n    }\r\n\r\n    expandAllFacets() {\r\n        const $accordionToggles = $(this.options.accordionToggleSelector);\r\n\r\n        $accordionToggles.each((index, accordionToggle) => {\r\n            const $accordionToggle = $(accordionToggle);\r\n\r\n            this.expandFacet($accordionToggle);\r\n        });\r\n    }\r\n\r\n    // Private methods\r\n    initPriceValidator() {\r\n        if ($(this.options.priceRangeFormSelector).length === 0) {\r\n            return;\r\n        }\r\n\r\n        const validator = nod();\r\n        const selectors = {\r\n            errorSelector: this.options.priceRangeErrorSelector,\r\n            fieldsetSelector: this.options.priceRangeFieldsetSelector,\r\n            formSelector: this.options.priceRangeFormSelector,\r\n            maxPriceSelector: this.options.priceRangeMaxPriceSelector,\r\n            minPriceSelector: this.options.priceRangeMinPriceSelector,\r\n        };\r\n\r\n        Validators.setMinMaxPriceValidation(validator, selectors);\r\n\r\n        this.priceRangeValidator = validator;\r\n    }\r\n\r\n    restoreCollapsedFacetItems() {\r\n        const $navLists = $(this.options.facetNavListSelector);\r\n\r\n        // Restore collapsed state for each facet\r\n        $navLists.each((index, navList) => {\r\n            const $navList = $(navList);\r\n            const id = $navList.attr('id');\r\n            const shouldCollapse = _.includes(this.collapsedFacetItems, id);\r\n\r\n            if (shouldCollapse) {\r\n                this.collapseFacetItems($navList);\r\n            } else {\r\n                this.expandFacetItems($navList);\r\n            }\r\n        });\r\n    }\r\n\r\n    restoreCollapsedFacets() {\r\n        const $accordionToggles = $(this.options.accordionToggleSelector);\r\n\r\n        $accordionToggles.each((index, accordionToggle) => {\r\n            const $accordionToggle = $(accordionToggle);\r\n            const collapsible = $accordionToggle.data('collapsibleInstance');\r\n            const id = collapsible.targetId;\r\n            const shouldCollapse = _.includes(this.collapsedFacets, id);\r\n\r\n            if (shouldCollapse) {\r\n                this.collapseFacet($accordionToggle);\r\n            } else {\r\n                this.expandFacet($accordionToggle);\r\n            }\r\n        });\r\n    }\r\n\r\n    bindEvents() {\r\n        // Clean-up\r\n        this.unbindEvents();\r\n\r\n        // DOM events\r\n        $(window).on('statechange', this.onStateChange);\r\n        $(window).on('popstate', this.onPopState);\r\n        $(document).on('click', this.options.showMoreToggleSelector, this.onToggleClick);\r\n        $(document).on('toggle.collapsible', this.options.accordionToggleSelector, this.onAccordionToggle);\r\n        $(document).on('keyup', this.options.facetedSearchFilterItems, this.filterFacetItems);\r\n        $(this.options.clearFacetSelector).on('click', this.onClearFacet);\r\n\r\n        // Hooks\r\n        hooks.on('facetedSearch-facet-clicked', this.onFacetClick);\r\n        hooks.on('facetedSearch-range-submitted', this.onRangeSubmit);\r\n        hooks.on('sortBy-submitted', this.onSortBySubmit);\r\n    }\r\n\r\n    unbindEvents() {\r\n        // DOM events\r\n        $(window).off('statechange', this.onStateChange);\r\n        $(window).off('popstate', this.onPopState);\r\n        $(document).off('click', this.options.showMoreToggleSelector, this.onToggleClick);\r\n        $(document).off('toggle.collapsible', this.options.accordionToggleSelector, this.onAccordionToggle);\r\n        $(document).off('keyup', this.options.facetedSearchFilterItems, this.filterFacetItems);\r\n        $(this.options.clearFacetSelector).off('click', this.onClearFacet);\r\n\r\n        // Hooks\r\n        hooks.off('facetedSearch-facet-clicked', this.onFacetClick);\r\n        hooks.off('facetedSearch-range-submitted', this.onRangeSubmit);\r\n        hooks.off('sortBy-submitted', this.onSortBySubmit);\r\n    }\r\n\r\n    onClearFacet(event) {\r\n        const $link = $(event.currentTarget);\r\n        const url = $link.attr('href');\r\n\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n\r\n        // Update URL\r\n        urlUtils.goToUrl(url);\r\n    }\r\n\r\n    onToggleClick(event) {\r\n        const $toggle = $(event.currentTarget);\r\n        const $navList = $($toggle.attr('href'));\r\n\r\n        // Prevent default\r\n        event.preventDefault();\r\n\r\n        // Toggle visible items\r\n        this.toggleFacetItems($navList);\r\n    }\r\n\r\n    onFacetClick(event) {\r\n        const $link = $(event.currentTarget);\r\n        const url = $link.attr('href');\r\n\r\n        event.preventDefault();\r\n\r\n        $link.toggleClass('is-selected');\r\n\r\n        // Update URL\r\n        urlUtils.goToUrl(url);\r\n\r\n        if (this.options.modalOpen) {\r\n            this.options.modal.close();\r\n        }\r\n    }\r\n\r\n    onSortBySubmit(event) {\r\n        const url = Url.parse(window.location.href, true);\r\n        const queryParams = $(event.currentTarget).serialize().split('=');\r\n\r\n        url.query[queryParams[0]] = queryParams[1];\r\n        delete url.query.page;\r\n\r\n        // Url object `query` is not a traditional JavaScript Object on all systems, clone it instead\r\n        const urlQueryParams = {};\r\n        Object.assign(urlQueryParams, url.query);\r\n\r\n        event.preventDefault();\r\n\r\n        urlUtils.goToUrl(Url.format({ pathname: url.pathname, search: urlUtils.buildQueryString(urlQueryParams) }));\r\n    }\r\n\r\n    onRangeSubmit(event) {\r\n        event.preventDefault();\r\n\r\n        if (!this.priceRangeValidator.areAll(nod.constants.VALID)) {\r\n            return;\r\n        }\r\n\r\n        const url = Url.parse(window.location.href, true);\r\n        let queryParams = decodeURI($(event.currentTarget).serialize()).split('&');\r\n        queryParams = urlUtils.parseQueryParams(queryParams);\r\n\r\n        for (const key in queryParams) {\r\n            if (queryParams.hasOwnProperty(key)) {\r\n                url.query[key] = queryParams[key];\r\n            }\r\n        }\r\n\r\n        // Url object `query` is not a traditional JavaScript Object on all systems, clone it instead\r\n        const urlQueryParams = {};\r\n        Object.assign(urlQueryParams, url.query);\r\n\r\n        urlUtils.goToUrl(Url.format({ pathname: url.pathname, search: urlUtils.buildQueryString(urlQueryParams) }));\r\n    }\r\n\r\n    onStateChange() {\r\n        this.updateView();\r\n    }\r\n\r\n    onAccordionToggle(event) {\r\n        const $accordionToggle = $(event.currentTarget);\r\n        const collapsible = $accordionToggle.data('collapsibleInstance');\r\n        const id = collapsible.targetId;\r\n\r\n        if (collapsible.isCollapsed) {\r\n            this.collapsedFacets = _.union(this.collapsedFacets, [id]);\r\n        } else {\r\n            this.collapsedFacets = _.without(this.collapsedFacets, id);\r\n        }\r\n    }\r\n\r\n    onPopState() {\r\n        const currentUrl = window.location.href;\r\n        const searchParams = new URLSearchParams(currentUrl);\r\n        // If searchParams does not contain a page value then modify url query string to have page=1\r\n        if (!searchParams.has('page')) {\r\n            const linkUrl = $('.pagination-link').attr('href');\r\n            const re = /page=[0-9]+/i;\r\n            const updatedLinkUrl = linkUrl.replace(re, 'page=1');\r\n            window.history.replaceState({}, document.title, updatedLinkUrl);\r\n        }\r\n        $(window).trigger('statechange');\r\n    }\r\n}\r\n\r\nexport default FacetedSearch;\r\n"],"sourceRoot":""}